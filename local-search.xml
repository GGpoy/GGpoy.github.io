<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>day-2</title>
    <link href="/2024/05/28/day-2/"/>
    <url>/2024/05/28/day-2/</url>
    
    <content type="html"><![CDATA[<p>方法在计算机中的执行原理：方法被调用时，进入栈内存运行，先进后出。</p><p><img src="/../image/93013c35691c72b8916cd7a316b7e901.png"></p><br/><p>基本数据类型：值传递<br>引用数据类型：地址传递</p><br/><p>this主要为了解决局部变量和成员变量的同名问题</p><br/><p>有参构造与无参构造<br>定义：创建一个类时，编译器会自动添加无参构造方法（默认构造方法），若自己手动添加构造方法（有参或无参），默认构造方法都将无效。</p><p>有参构造方法：</p><p><img src="/image/380da3fa726421ffbc7caebd56b3cfe6.png" alt="screen-capture"></p><p><img src="/image/28f38b49b7e7902fed85e3641ce3eb4f.png"></p><p>通过有参构造，创建对象时可以直接进行属性赋值，而不用对象名.属性名的方法。</p><p>无参构造方法：</p><br/><p><img src="/image/73cabc220db2357d393df694bf342b5e.png"></p><br/><p>封装：使一部分成员充当类与外部的接口，而将其他的成员隐藏起来。</p><br/><p>继承：<br>关键字extends，子类继承父类的非私有成员</p><p>子类的对象由子类和父类同时完成</p><p>单继承，一个类只能继承一个直接父类</p><p>子类的构造方法中，默认有super()，指向父类的无参构造方法，故先调用父类构造方法，再调用子类构造方法。若父类没有无参构造方法（只有有参构造方法），需要手写super（）去调用父类有参构造</p><br/><p>权限修饰符：<img src="/image/a51922c6d03d504603839e48c84857c9.png" alt="截图"></p><br/><p>Object类：所有类的祖宗类</p><br/><p>方法的重写：<br>重写方法的返回值类型、形参类型、形参的顺序、形参的数量必须与被重写方法相同。</p><p>写重写方法前，使用Override注解，提高代码可读性</p><p>重写方法的访问权限必须大于等于被重新方法的        public&gt;protected&gt;缺省</p><p>私有方法和静态方法不能被重写</p><br/><p>this拓展：</p><p>当一个类的对象实例化时需要一个默认值，可以通过多个有参构造来实现对对象的赋值。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Day-1</title>
    <link href="/2024/05/26/day-1/"/>
    <url>/2024/05/26/day-1/</url>
    
    <content type="html"><![CDATA[<p>命名规则：<br>包：所有字母小写<br>类或接口：单词首字母大写<br>方法或变量：首单词的首字母小写，其余单词首字母大写<br>常量：所有字母大写，多单词用下划线_区分</p><br/><p>8大基本数据类型：<br>整数类型：byte、short、int、long<br>小数类型：float、double<br>字符类型：char<br>布尔类型：boolean</p><br/><p>引用数据类型：<br>类、接口、数组、枚举、注解、字符串等</p><br/><p>算数运算符++、–的用法：<br>i++,先赋值，再运算<br>++i,先运算，再赋值</p><br/><p>逻辑运算符：<br>位运算符、逻辑运算符：&amp;、|、^<br>逻辑运算符：！、&amp;&amp;、||<br>&amp;&amp;与&amp;的区别：<br>当根据的表达式左边或右边已经可以判断出整个表达式的真假时，&amp;&amp;将不再执行代码，从而节省性能。<br>&amp;可作为位运算符，进行二进制间的计算</p><br/><p>switch语句：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>      <span class="hljs-keyword">case</span> 值：<br>      语句体<br>      <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> 值：<br>      语句体<br>      <span class="hljs-keyword">break</span>;<br>      ...<br>      <span class="hljs-keyword">default</span>:<br>      语句体<br>      <span class="hljs-keyword">break</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意点：switch语句的原理是跳转到case值的位置执行下面的所有语句，包括其他case里面的值，直到最后或者遇到break。</p><br/><p>for循环语句和while循环的区别：<br>控制条件语句的变量，在for循环结束后便不能被访问，而while循环结束后还可以继续使用。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>仅以此博客记录我的学习生活</title>
    <link href="/2024/05/24/%E4%BB%85%E4%BB%A5%E6%AD%A4%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%94%9F%E6%B4%BB/"/>
    <url>/2024/05/24/%E4%BB%85%E4%BB%A5%E6%AD%A4%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%94%9F%E6%B4%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="Begin"><a href="#Begin" class="headerlink" title="Begin:"></a>Begin:</h2><p>万事开头难，生活如此，学习亦是如此。</p><p>努力不一定成功，但不努力只能喝西北风。</p><p>所以，请坚持下去   :)</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
